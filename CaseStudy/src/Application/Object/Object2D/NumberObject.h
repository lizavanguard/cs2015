//******************************************************************************
//
// ナンバーオブジェクト処理  [NumberObject.h]
// Author  :  SHOHEI MATSUMOTO
// 更新日  :  2015/06/12
//
//******************************************************************************
//******************************************************************************
// インクルードガード
//******************************************************************************
#ifndef _NUMBEROBJECT_H_
#define _NUMBEROBJECT_H_

//******************************************************************************
// インクルードファイル
//******************************************************************************
#include "Object2D.h"

//******************************************************************************
// ライブラリのリンク
//******************************************************************************


//******************************************************************************
// マクロ定義
//******************************************************************************
#define NUMBER_DIVISION (0.1f)


//******************************************************************************
// 構造体定義
//******************************************************************************
// modemanaged
typedef enum{
    NORMAL = 0,
    TIMER,
}NUMBER_TYPE;

//******************************************************************************
// クラス定義
//******************************************************************************
class NumberObject : public Object2D{
  // enum ======================================
  public:

  // funciton ==================================
public:
  // ctor
  NumberObject(const D3DXVECTOR3 &pos, const float &rot, const D3DXVECTOR2 &size, NUMBER_TYPE type);
  // dtor
//  virtual ~NumberObject();
//  void Init(D3DXVECTOR3 pos, D3DXVECTOR2 rot, D3DXVECTOR2 size, NUMBER_TYPE type);
  void Update();
  // draw
  void _PreProcessOfDraw(void);
  void _PostProcessOfDraw(void);
  // set
  void SetValue(int value){ value_ = value; }
  // get
  int GetValue(void){ return value_; }

protected:
private:


  // parameter =================================
public:

protected:

private:
  int value_;
  NUMBER_TYPE type_;

};

//******************************************************************************
// プロトタイプ宣言
//******************************************************************************



#endif
// EOF